digraph CFG {
  node [shape=box, fontname="monospace"];
  B0 [label="B0:\n0: #include <stdio.h>\n1: #include <stdlib.h>\n2: #include <string.h>\n6: #define MAX_BOOKS 100\n7: #define TITLE_LEN 50\n8: #define AUTHOR_LEN 50\n10: typedef struct {\n11:     int id;\n12:     char title[TITLE_LEN];\n13:     char author[AUTHOR_LEN];\n14:     int totalCopies;\n15:     int availableCopies;\n16: } Book;\n18: Book library[MAX_BOOKS];\n19: int bookCount = 0;\n22: void addBook();\n23: void displayBooks();\n24: void searchBook();\n25: void issueBook();\n26: void returnBook();\n27: void removeBook();\n28: void pauseScreen();\n30: int main() {\n31:     int choice;"];
  B1 [label="B1:\n33:     while (1) {"];
  B2 [label="B2:\n34:         printf(\"\\n===== Library Management Menu =====\\n\");\n35:         printf(\"1. Add new book\\n\");\n36:         printf(\"2. Display all books\\n\");\n37:         printf(\"3. Search book by title\\n\");\n38:         printf(\"4. Issue a book\\n\");\n39:         printf(\"5. Return a book\\n\");\n40:         printf(\"6. Remove a book\\n\");\n41:         printf(\"7. Exit\\n\");\n42:         printf(\"===================================\\n\");\n43:         printf(\"Enter your choice: \");\n44:         if (scanf(\"%d\", &choice) != 1) {\n45:             printf(\"Invalid input. Clearing buffer.\\n\");\n46:             while (getchar() != '\\n');\n47:             continue;\n48:         }\n50:         if (choice == 7) {\n51:             printf(\"Exiting program...\\n\");\n52:             break;\n53:         }\n55:         switch (choice) {\n56:             case 1: addBook(); break;\n57:             case 2: displayBooks(); break;\n58:             case 3: searchBook(); break;\n59:             case 4: issueBook(); break;\n60:             case 5: returnBook(); break;\n61:             case 6: removeBook(); break;\n62:             default: printf(\"Invalid choice.\\n\");\n63:         }\n65:         pauseScreen();\n66:     }"];
  B3 [label="B3:\n68:     return 0;"];
  B4 [label="B4:\n69: }\n72: void addBook() {"];
  B5 [label="B5:\n73:     if (bookCount >= MAX_BOOKS) {"];
  B6 [label="B6:\n74:         printf(\"Library full. Cannot add more books.\\n\");\n75:         return;\n76:     }"];
  B7 [label="B7:\n77:     Book b;\n78:     b.id = bookCount + 1;\n79:     printf(\"Enter book title: \");"];
  B8 [label="B8:\n80:     while (getchar() != '\\n');"];
  B9 [label="B9:\n81:     fgets(b.title, TITLE_LEN, stdin);"];
  B10 [label="B10:\n82:     b.title[strcspn(b.title, \"\\n\")] = 0;\n83:     printf(\"Enter author: \");\n84:     fgets(b.author, AUTHOR_LEN, stdin);\n85:     b.author[strcspn(b.author, \"\\n\")] = 0;\n86:     printf(\"Enter total copies: \");\n87:     scanf(\"%d\", &b.totalCopies);"];
  B11 [label="B11:\n88:     if (b.totalCopies < 0) b.totalCopies = 0;"];
  B12 [label="B12:\n89:     b.availableCopies = b.totalCopies;"];
  B13 [label="B13:\n91:     library[bookCount] = b;\n92:     bookCount++;\n93:     printf(\"Book added successfully with ID %d.\\n\", b.id);\n94: }\n97: void displayBooks() {"];
  B14 [label="B14:\n98:     if (bookCount == 0) {"];
  B15 [label="B15:\n99:         printf(\"No books in library.\\n\");\n100:         return;\n101:     }"];
  B16 [label="B16:\n102:     printf(\"\\n%-5s %-30s %-20s %-10s %-10s\\n\", \"ID\", \"Title\", \"Author\", \"Total\", \"Available\");\n103:     printf(\"----------------------------------------------------------------------------\\n\");"];
  B17 [label="B17:\n104:     for (int i = 0; i < bookCount; i++) {"];
  B18 [label="B18:\n105:         printf(\"%-5d %-30s %-20s %-10d %-10d\\n\",\n106:                library[i].id,\n107:                library[i].title,\n108:                library[i].author,\n109:                library[i].totalCopies,\n110:                library[i].availableCopies);\n111:     }"];
  B19 [label="B19:\n112: }\n115: void searchBook() {\n116:     char searchTitle[TITLE_LEN];\n117:     printf(\"Enter title to search: \");"];
  B20 [label="B20:\n118:     while (getchar() != '\\n');"];
  B21 [label="B21:\n119:     fgets(searchTitle, TITLE_LEN, stdin);"];
  B22 [label="B22:\n120:     searchTitle[strcspn(searchTitle, \"\\n\")] = 0;\n122:     int found = 0;"];
  B23 [label="B23:\n123:     for (int i = 0; i < bookCount; i++) {"];
  B24 [label="B24:\n124:         if (strstr(library[i].title, searchTitle) != NULL) {\n125:             if (!found) {\n126:                 printf(\"\\n%-5s %-30s %-20s %-10s %-10s\\n\", \"ID\", \"Title\", \"Author\", \"Total\", \"Available\");\n127:                 printf(\"----------------------------------------------------------------------------\\n\");\n128:             }\n129:             found = 1;\n130:             printf(\"%-5d %-30s %-20s %-10d %-10d\\n\",\n131:                    library[i].id,\n132:                    library[i].title,\n133:                    library[i].author,\n134:                    library[i].totalCopies,\n135:                    library[i].availableCopies);\n136:         }\n137:     }"];
  B25 [label="B25:\n138:     if (!found) {"];
  B26 [label="B26:\n139:         printf(\"No book found with title containing \\\"%s\\\".\\n\", searchTitle);\n140:     }"];
  B27 [label="B27:\n141: }\n144: void issueBook() {\n145:     int id;\n146:     printf(\"Enter book ID to issue: \");\n147:     scanf(\"%d\", &id);"];
  B28 [label="B28:\n148:     if (id <= 0 || id > bookCount) {"];
  B29 [label="B29:\n149:         printf(\"Invalid ID.\\n\");\n150:         return;\n151:     }"];
  B30 [label="B30:\n152:     Book *b = &library[id - 1];"];
  B31 [label="B31:\n153:     if (b->availableCopies > 0) {"];
  B32 [label="B32:\n154:         b->availableCopies--;\n155:         printf(\"Book \\\"%s\\\" issued successfully. Remaining copies: %d\\n\", b->title, b->availableCopies);\n156:     } else {\n157:         printf(\"No available copies to issue.\\n\");\n158:     }"];
  B33 [label="B33:\n159: }\n162: void returnBook() {\n163:     int id;\n164:     printf(\"Enter book ID to return: \");"];
  B34 [label="B34:\n165:     scanf(\"%d\", &id);"];
  B35 [label="B35:\n166:     if (id <= 0 || id > bookCount) {"];
  B36 [label="B36:\n167:         printf(\"Invalid ID.\\n\");\n168:         return;\n169:     }"];
  B37 [label="B37:\n170:     Book *b = &library[id - 1];"];
  B38 [label="B38:\n171:     if (b->availableCopies < b->totalCopies) {"];
  B39 [label="B39:\n172:         b->availableCopies++;\n173:         printf(\"Book \\\"%s\\\" returned successfully. Available copies: %d\\n\", b->title, b->availableCopies);\n174:     } else {\n175:         printf(\"All copies are already in library.\\n\");\n176:     }"];
  B40 [label="B40:\n177: }\n180: void removeBook() {\n181:     int id;\n182:     printf(\"Enter book ID to remove: \");\n183:     scanf(\"%d\", &id);"];
  B41 [label="B41:\n184:     if (id <= 0 || id > bookCount) {"];
  B42 [label="B42:\n185:         printf(\"Invalid ID.\\n\");\n186:         return;\n187:     }"];
  B43 [label="B43:\n189:     for (int i = id - 1; i < bookCount - 1; i++) {"];
  B44 [label="B44:\n190:         library[i] = library[i + 1];\n191:         library[i].id = i + 1;\n192:     }"];
  B45 [label="B45:\n193:     bookCount--;\n194:     printf(\"Book removed successfully.\\n\");\n195: }\n198: void pauseScreen() {\n199:     printf(\"Press Enter to continue...\");"];
  B46 [label="B46:\n200:     while (getchar() != '\\n');"];
  B47 [label="B47:\n201:     getchar();"];
  B48 [label="B48:\n202: }"];
  B0 -> B1;
  B1 -> B2 [label="true"];
  B1 -> B3 [label="false"];
  B2 -> B1 [label="back"];
  B1 -> B3 [label="exit"];
  B2 -> B3;
  B3 -> B4;
  B4 -> B5;
  B5 -> B6 [label="true"];
  B5 -> B7 [label="false"];
  B6 -> B7;
  B7 -> B8;
  B8 -> B9 [label="true"];
  B8 -> B10 [label="false"];
  B9 -> B8 [label="back"];
  B8 -> B10 [label="exit"];
  B9 -> B10;
  B10 -> B11;
  B11 -> B12 [label="true"];
  B11 -> B13 [label="false"];
  B12 -> B13;
  B13 -> B14;
  B14 -> B15 [label="true"];
  B14 -> B16 [label="false"];
  B15 -> B16;
  B16 -> B17;
  B17 -> B18 [label="true"];
  B17 -> B19 [label="false"];
  B18 -> B17 [label="back"];
  B17 -> B19 [label="exit"];
  B18 -> B19;
  B19 -> B20;
  B20 -> B21 [label="true"];
  B20 -> B22 [label="false"];
  B21 -> B20 [label="back"];
  B20 -> B22 [label="exit"];
  B21 -> B22;
  B22 -> B23;
  B23 -> B24 [label="true"];
  B23 -> B25 [label="false"];
  B24 -> B23 [label="back"];
  B23 -> B25 [label="exit"];
  B24 -> B25;
  B25 -> B26 [label="true"];
  B25 -> B27 [label="false"];
  B26 -> B27;
  B27 -> B28;
  B28 -> B29 [label="true"];
  B28 -> B30 [label="false"];
  B29 -> B30;
  B30 -> B31;
  B31 -> B32 [label="true"];
  B31 -> B33 [label="false"];
  B32 -> B33;
  B33 -> B34;
  B34 -> B35;
  B35 -> B36 [label="true"];
  B35 -> B37 [label="false"];
  B36 -> B37;
  B37 -> B38;
  B38 -> B39 [label="true"];
  B38 -> B40 [label="false"];
  B39 -> B40;
  B40 -> B41;
  B41 -> B42 [label="true"];
  B41 -> B43 [label="false"];
  B42 -> B43;
  B43 -> B44 [label="true"];
  B43 -> B45 [label="false"];
  B44 -> B43 [label="back"];
  B43 -> B45 [label="exit"];
  B44 -> B45;
  B45 -> B46;
  B46 -> B47 [label="true"];
  B46 -> B48 [label="false"];
  B47 -> B46 [label="back"];
  B46 -> B48 [label="exit"];
  B47 -> B48;
}
