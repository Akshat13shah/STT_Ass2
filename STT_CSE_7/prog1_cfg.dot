digraph CFG {
  node [shape=box, fontname="monospace"];
  B0 [label="B0:\n0: #include <stdio.h>\n1: #include <stdlib.h>\n2: #include <string.h>\n6: #define MAX_STUDENTS 100\n8: struct Student {\n9:     int roll;\n10:     char name[50];\n11:     float marks;\n12: };\n14: struct Student students[MAX_STUDENTS];\n15: int count = 0;\n18: void addStudent();\n19: void displayStudents();\n20: void searchStudent();\n21: void updateStudent();\n22: void deleteStudent();\n23: void sortStudents();\n24: void printMenu();\n25: void pause();\n28: int main() {\n29:     int choice;"];
  B1 [label="B1:\n32:     while (1) {"];
  B2 [label="B2:\n33:         printMenu();\n34:         printf(\"Enter your choice: \");\n35:         if (scanf(\"%d\", &choice) != 1) {\n36:             printf(\"Invalid input! Clearing buffer...\\n\");\n37:             while (getchar() != '\\n');\n38:             continue;\n39:         }\n41:         switch (choice) {\n42:             case 1: addStudent(); break;\n43:             case 2: displayStudents(); break;\n44:             case 3: searchStudent(); break;\n45:             case 4: updateStudent(); break;\n46:             case 5: deleteStudent(); break;\n47:             case 6: sortStudents(); break;\n48:             case 7: printf(\"Exiting program...\\n\"); exit(0);\n49:             default: printf(\"Invalid choice. Try again.\\n\");\n50:         }\n51:         pause();\n52:     }"];
  B3 [label="B3:\n53:     return 0;"];
  B4 [label="B4:\n54: }\n57: void printMenu() {\n58:     printf(\"\\n==============================\\n\");\n59:     printf(\" Student Record Management \\n\");\n60:     printf(\"==============================\\n\");\n61:     printf(\"1. Add Student\\n\");\n62:     printf(\"2. Display Students\\n\");\n63:     printf(\"3. Search Student by Roll\\n\");\n64:     printf(\"4. Update Student\\n\");\n65:     printf(\"5. Delete Student\\n\");\n66:     printf(\"6. Sort Students by Marks\\n\");\n67:     printf(\"7. Exit\\n\");\n68:     printf(\"==============================\\n\");\n69: }\n72: void addStudent() {"];
  B5 [label="B5:\n73:     if (count >= MAX_STUDENTS) {"];
  B6 [label="B6:\n74:         printf(\"Maximum student limit reached!\\n\");\n75:         return;\n76:     }"];
  B7 [label="B7:\n77:     struct Student s;\n78:     printf(\"Enter roll number: \");\n79:     scanf(\"%d\", &s.roll);\n80:     printf(\"Enter name: \");\n81:     scanf(\"%s\", s.name);\n82:     printf(\"Enter marks: \");\n83:     scanf(\"%f\", &s.marks);\n85:     students[count] = s;\n86:     count++;\n87:     printf(\"Student added successfully!\\n\");\n88: }\n91: void displayStudents() {"];
  B8 [label="B8:\n92:     if (count == 0) {"];
  B9 [label="B9:\n93:         printf(\"No students to display.\\n\");\n94:         return;\n95:     }"];
  B10 [label="B10:\n96:     printf(\"\\nRoll\\tName\\tMarks\\n\");\n97:     printf(\"-------------------------\\n\");"];
  B11 [label="B11:\n98:     for (int i = 0; i < count; i++) {"];
  B12 [label="B12:\n99:         printf(\"%d\\t%s\\t%.2f\\n\", students[i].roll, students[i].name, students[i].marks);\n100:     }"];
  B13 [label="B13:\n101: }\n104: void searchStudent() {"];
  B14 [label="B14:\n105:     if (count == 0) {"];
  B15 [label="B15:\n106:         printf(\"No students to search.\\n\");\n107:         return;\n108:     }"];
  B16 [label="B16:\n109:     int roll;\n110:     printf(\"Enter roll number to search: \");\n111:     scanf(\"%d\", &roll);"];
  B17 [label="B17:\n113:     for (int i = 0; i < count; i++) {"];
  B18 [label="B18:\n114:         if (students[i].roll == roll) {\n115:             printf(\"Student found: %d %s %.2f\\n\",\n116:                    students[i].roll, students[i].name, students[i].marks);\n117:             return;\n118:         }\n119:     }"];
  B19 [label="B19:\n120:     printf(\"Student not found.\\n\");\n121: }\n124: void updateStudent() {"];
  B20 [label="B20:\n125:     if (count == 0) {"];
  B21 [label="B21:\n126:         printf(\"No students to update.\\n\");\n127:         return;\n128:     }"];
  B22 [label="B22:\n129:     int roll;\n130:     printf(\"Enter roll number to update: \");\n131:     scanf(\"%d\", &roll);"];
  B23 [label="B23:\n133:     for (int i = 0; i < count; i++) {"];
  B24 [label="B24:\n134:         if (students[i].roll == roll) {\n135:             printf(\"Enter new name: \");\n136:             scanf(\"%s\", students[i].name);\n137:             printf(\"Enter new marks: \");\n138:             scanf(\"%f\", &students[i].marks);\n139:             printf(\"Record updated successfully.\\n\");\n140:             return;\n141:         }\n142:     }"];
  B25 [label="B25:\n143:     printf(\"Student not found.\\n\");\n144: }\n147: void deleteStudent() {"];
  B26 [label="B26:\n148:     if (count == 0) {"];
  B27 [label="B27:\n149:         printf(\"No students to delete.\\n\");\n150:         return;\n151:     }"];
  B28 [label="B28:\n152:     int roll;\n153:     printf(\"Enter roll number to delete: \");\n154:     scanf(\"%d\", &roll);"];
  B29 [label="B29:\n156:     for (int i = 0; i < count; i++) {"];
  B30 [label="B30:\n157:         if (students[i].roll == roll) {\n159:             for (int j = i; j < count - 1; j++) {\n160:                 students[j] = students[j + 1];\n161:             }\n162:             count--;\n163:             printf(\"Record deleted successfully.\\n\");\n164:             return;\n165:         }\n166:     }"];
  B31 [label="B31:\n167:     printf(\"Student not found.\\n\");\n168: }\n171: void sortStudents() {"];
  B32 [label="B32:\n172:     if (count == 0) {"];
  B33 [label="B33:\n173:         printf(\"No students to sort.\\n\");\n174:         return;\n175:     }"];
  B34 [label="B34:\n176:     for (int i = 0; i < count - 1; i++) {"];
  B35 [label="B35:\n177:         for (int j = 0; j < count - i - 1; j++) {\n178:             if (students[j].marks < students[j + 1].marks) {\n179:                 struct Student temp = students[j];\n180:                 students[j] = students[j + 1];\n181:                 students[j + 1] = temp;\n182:             }\n183:         }\n184:     }"];
  B36 [label="B36:\n185:     printf(\"Students sorted by marks (descending).\\n\");\n186: }\n189: void pause() {\n190:     printf(\"Press Enter to continue...\");"];
  B37 [label="B37:\n191:     while (getchar() != '\\n');"];
  B38 [label="B38:\n192:     getchar();"];
  B39 [label="B39:\n193: }"];
  B0 -> B1;
  B1 -> B2 [label="true"];
  B1 -> B3 [label="false"];
  B2 -> B1 [label="back"];
  B1 -> B3 [label="exit"];
  B2 -> B3;
  B3 -> B4;
  B4 -> B5;
  B5 -> B6 [label="true"];
  B5 -> B7 [label="false"];
  B6 -> B7;
  B7 -> B8;
  B8 -> B9 [label="true"];
  B8 -> B10 [label="false"];
  B9 -> B10;
  B10 -> B11;
  B11 -> B12 [label="true"];
  B11 -> B13 [label="false"];
  B12 -> B11 [label="back"];
  B11 -> B13 [label="exit"];
  B12 -> B13;
  B13 -> B14;
  B14 -> B15 [label="true"];
  B14 -> B16 [label="false"];
  B15 -> B16;
  B16 -> B17;
  B17 -> B18 [label="true"];
  B17 -> B19 [label="false"];
  B18 -> B17 [label="back"];
  B17 -> B19 [label="exit"];
  B18 -> B19;
  B19 -> B20;
  B20 -> B21 [label="true"];
  B20 -> B22 [label="false"];
  B21 -> B22;
  B22 -> B23;
  B23 -> B24 [label="true"];
  B23 -> B25 [label="false"];
  B24 -> B23 [label="back"];
  B23 -> B25 [label="exit"];
  B24 -> B25;
  B25 -> B26;
  B26 -> B27 [label="true"];
  B26 -> B28 [label="false"];
  B27 -> B28;
  B28 -> B29;
  B29 -> B30 [label="true"];
  B29 -> B31 [label="false"];
  B30 -> B29 [label="back"];
  B29 -> B31 [label="exit"];
  B30 -> B31;
  B31 -> B32;
  B32 -> B33 [label="true"];
  B32 -> B34 [label="false"];
  B33 -> B34;
  B34 -> B35 [label="true"];
  B34 -> B36 [label="false"];
  B35 -> B34 [label="back"];
  B34 -> B36 [label="exit"];
  B35 -> B36;
  B36 -> B37;
  B37 -> B38 [label="true"];
  B37 -> B39 [label="false"];
  B38 -> B37 [label="back"];
  B37 -> B39 [label="exit"];
  B38 -> B39;
}
