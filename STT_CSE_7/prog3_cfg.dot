digraph CFG {
  node [shape=box, fontname="monospace"];
  B0 [label="B0:\n0: #include <stdio.h>\n1: #include <stdlib.h>\n5: #define MAX 20\n8: void inputMatrix(int rows, int cols, int m[MAX][MAX]);\n9: void printMatrix(int rows, int cols, int m[MAX][MAX]);\n10: void addMatrices(int r, int c, int a[MAX][MAX], int b[MAX][MAX], int res[MAX][MAX]);\n11: void subtractMatrices(int r, int c, int a[MAX][MAX], int b[MAX][MAX], int res[MAX][MAX]);\n12: void multiplyMatrices(int r1, int c1, int a[MAX][MAX], int r2, int c2, int b[MAX][MAX], int res[MAX][MAX]);\n13: void transposeMatrix(int r, int c, int a[MAX][MAX], int res[MAX][MAX]);\n14: int isSymmetric(int r, int c, int a[MAX][MAX]);\n15: void pauseScreen();\n17: int main() {\n18:     int choice;\n19:     int r1, c1, r2, c2;\n20:     int A[MAX][MAX], B[MAX][MAX], result[MAX][MAX];"];
  B1 [label="B1:\n22:     while (1) {"];
  B2 [label="B2:\n23:         printf(\"\\n===== Matrix Operations Menu =====\\n\");\n24:         printf(\"1. Add two matrices\\n\");\n25:         printf(\"2. Subtract two matrices\\n\");\n26:         printf(\"3. Multiply two matrices\\n\");\n27:         printf(\"4. Transpose a matrix\\n\");\n28:         printf(\"5. Check if matrix is symmetric\\n\");\n29:         printf(\"6. Exit\\n\");\n30:         printf(\"==================================\\n\");\n31:         printf(\"Enter your choice: \");\n32:         if (scanf(\"%d\", &choice) != 1) {\n33:             printf(\"Invalid input. Clearing buffer.\\n\");\n34:             while (getchar() != '\\n');\n35:             continue;\n36:         }\n38:         if (choice == 6) {\n39:             printf(\"Exiting program...\\n\");\n40:             break;\n41:         }\n43:         switch (choice) {\n44:             case 1:\n45:                 printf(\"Enter rows and columns: \");\n46:                 scanf(\"%d %d\", &r1, &c1);\n47:                 printf(\"Enter Matrix A:\\n\");\n48:                 inputMatrix(r1, c1, A);\n49:                 printf(\"Enter Matrix B:\\n\");\n50:                 inputMatrix(r1, c1, B);\n51:                 addMatrices(r1, c1, A, B, result);\n52:                 printf(\"Resultant Matrix (A+B):\\n\");\n53:                 printMatrix(r1, c1, result);\n54:                 break;\n56:             case 2:\n57:                 printf(\"Enter rows and columns: \");\n58:                 scanf(\"%d %d\", &r1, &c1);\n59:                 printf(\"Enter Matrix A:\\n\");\n60:                 inputMatrix(r1, c1, A);\n61:                 printf(\"Enter Matrix B:\\n\");\n62:                 inputMatrix(r1, c1, B);\n63:                 subtractMatrices(r1, c1, A, B, result);\n64:                 printf(\"Resultant Matrix (A-B):\\n\");\n65:                 printMatrix(r1, c1, result);\n66:                 break;\n68:             case 3:\n69:                 printf(\"Enter rows and columns of Matrix A: \");\n70:                 scanf(\"%d %d\", &r1, &c1);\n71:                 printf(\"Enter Matrix A:\\n\");\n72:                 inputMatrix(r1, c1, A);\n73:                 printf(\"Enter rows and columns of Matrix B: \");\n74:                 scanf(\"%d %d\", &r2, &c2);\n75:                 printf(\"Enter Matrix B:\\n\");\n76:                 inputMatrix(r2, c2, B);\n77:                 if (c1 != r2) {\n78:                     printf(\"Matrix multiplication not possible. Columns of A != Rows of B.\\n\");\n79:                 } else {\n80:                     multiplyMatrices(r1, c1, A, r2, c2, B, result);\n81:                     printf(\"Resultant Matrix (A*B):\\n\");\n82:                     printMatrix(r1, c2, result);\n83:                 }\n84:                 break;\n86:             case 4:\n87:                 printf(\"Enter rows and columns: \");\n88:                 scanf(\"%d %d\", &r1, &c1);\n89:                 printf(\"Enter Matrix:\\n\");\n90:                 inputMatrix(r1, c1, A);\n91:                 transposeMatrix(r1, c1, A, result);\n92:                 printf(\"Transpose Matrix:\\n\");\n93:                 printMatrix(c1, r1, result);\n94:                 break;\n96:             case 5:\n97:                 printf(\"Enter rows and columns: \");\n98:                 scanf(\"%d %d\", &r1, &c1);\n99:                 printf(\"Enter Matrix:\\n\");\n100:                 inputMatrix(r1, c1, A);\n101:                 if (isSymmetric(r1, c1, A)) {\n102:                     printf(\"Matrix is symmetric.\\n\");\n103:                 } else {\n104:                     printf(\"Matrix is not symmetric.\\n\");\n105:                 }\n106:                 break;\n108:             default:\n109:                 printf(\"Invalid choice.\\n\");\n110:         }\n112:         pauseScreen();\n113:     }"];
  B3 [label="B3:\n115:     return 0;"];
  B4 [label="B4:\n116: }\n119: void inputMatrix(int rows, int cols, int m[MAX][MAX]) {"];
  B5 [label="B5:\n120:     for (int i = 0; i < rows; i++) {"];
  B6 [label="B6:\n121:         for (int j = 0; j < cols; j++) {\n122:             printf(\"Enter element [%d][%d]: \", i, j);\n123:             scanf(\"%d\", &m[i][j]);\n124:         }\n125:     }"];
  B7 [label="B7:\n126: }\n129: void printMatrix(int rows, int cols, int m[MAX][MAX]) {"];
  B8 [label="B8:\n130:     for (int i = 0; i < rows; i++) {"];
  B9 [label="B9:\n131:         for (int j = 0; j < cols; j++) {\n132:             printf(\"%4d \", m[i][j]);\n133:         }\n134:         printf(\"\\n\");\n135:     }"];
  B10 [label="B10:\n136: }\n139: void addMatrices(int r, int c, int a[MAX][MAX], int b[MAX][MAX], int res[MAX][MAX]) {"];
  B11 [label="B11:\n140:     for (int i = 0; i < r; i++) {"];
  B12 [label="B12:\n141:         for (int j = 0; j < c; j++) {\n142:             res[i][j] = a[i][j] + b[i][j];\n143:         }\n144:     }"];
  B13 [label="B13:\n145: }\n148: void subtractMatrices(int r, int c, int a[MAX][MAX], int b[MAX][MAX], int res[MAX][MAX]) {"];
  B14 [label="B14:\n149:     for (int i = 0; i < r; i++) {"];
  B15 [label="B15:\n150:         for (int j = 0; j < c; j++) {\n151:             res[i][j] = a[i][j] - b[i][j];\n152:         }\n153:     }"];
  B16 [label="B16:\n154: }\n157: void multiplyMatrices(int r1, int c1, int a[MAX][MAX], int r2, int c2, int b[MAX][MAX], int res[MAX][MAX]) {"];
  B17 [label="B17:\n158:     for (int i = 0; i < r1; i++) {"];
  B18 [label="B18:\n159:         for (int j = 0; j < c2; j++) {\n160:             res[i][j] = 0;\n161:             for (int k = 0; k < c1; k++) {\n162:                 res[i][j] += a[i][k] * b[k][j];\n163:             }\n164:         }\n165:     }"];
  B19 [label="B19:\n166: }\n169: void transposeMatrix(int r, int c, int a[MAX][MAX], int res[MAX][MAX]) {"];
  B20 [label="B20:\n170:     for (int i = 0; i < r; i++) {"];
  B21 [label="B21:\n171:         for (int j = 0; j < c; j++) {\n172:             res[j][i] = a[i][j];\n173:         }\n174:     }"];
  B22 [label="B22:\n175: }\n178: int isSymmetric(int r, int c, int a[MAX][MAX]) {"];
  B23 [label="B23:\n179:     if (r != c) return 0;\n180:     for (int i = 0; i < r; i++) {"];
  B24 [label="B24:\n181:         for (int j = 0; j < c; j++) {\n182:             if (a[i][j] != a[j][i]) {\n183:                 return 0;\n184:             }\n185:         }\n186:     }"];
  B25 [label="B25:\n187:     return 1;"];
  B26 [label="B26:\n188: }\n191: void pauseScreen() {\n192:     printf(\"Press Enter to continue...\");"];
  B27 [label="B27:\n193:     while (getchar() != '\\n');"];
  B28 [label="B28:\n194:     getchar();"];
  B29 [label="B29:\n195: }"];
  B0 -> B1;
  B1 -> B2 [label="true"];
  B1 -> B3 [label="false"];
  B2 -> B1 [label="back"];
  B1 -> B3 [label="exit"];
  B2 -> B3;
  B3 -> B4;
  B4 -> B5;
  B5 -> B6 [label="true"];
  B5 -> B7 [label="false"];
  B6 -> B5 [label="back"];
  B5 -> B7 [label="exit"];
  B6 -> B7;
  B7 -> B8;
  B8 -> B9 [label="true"];
  B8 -> B10 [label="false"];
  B9 -> B8 [label="back"];
  B8 -> B10 [label="exit"];
  B9 -> B10;
  B10 -> B11;
  B11 -> B12 [label="true"];
  B11 -> B13 [label="false"];
  B12 -> B11 [label="back"];
  B11 -> B13 [label="exit"];
  B12 -> B13;
  B13 -> B14;
  B14 -> B15 [label="true"];
  B14 -> B16 [label="false"];
  B15 -> B14 [label="back"];
  B14 -> B16 [label="exit"];
  B15 -> B16;
  B16 -> B17;
  B17 -> B18 [label="true"];
  B17 -> B19 [label="false"];
  B18 -> B17 [label="back"];
  B17 -> B19 [label="exit"];
  B18 -> B19;
  B19 -> B20;
  B20 -> B21 [label="true"];
  B20 -> B22 [label="false"];
  B21 -> B20 [label="back"];
  B20 -> B22 [label="exit"];
  B21 -> B22;
  B22 -> B23;
  B23 -> B24 [label="true"];
  B23 -> B25 [label="false"];
  B24 -> B25;
  B25 -> B26;
  B26 -> B27;
  B27 -> B28 [label="true"];
  B27 -> B29 [label="false"];
  B28 -> B27 [label="back"];
  B27 -> B29 [label="exit"];
  B28 -> B29;
}
